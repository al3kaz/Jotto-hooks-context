{"version":3,"sources":["actions/hookActions.js","contexts/languageContext.js","contexts/guessedWordsContext.js","contexts/successContext.js","helpers/strings.js","components/input/Input.js","helpers/index.js","components/languagePicker/languagePicker.js","components/congrats/Congrats.js","components/guessedWords/GuessedWords.js","components/newWordButton/NewWordButton.js","components/giveUpButton/GiveUpButton.js","components/secretWordReveal/SecretWordReveal.js","components/enterSecretWordButton/EnterSecretWordButton.js","components/entrySecretWord/EntrySecretWord.js","components/serverError/ServerError.js","App.js","serviceWorker.js","index.js"],"names":["getSecretWord","setSecretWord","setServerError","a","React","createContext","guessedWordsContext","GuessedWordsProvider","props","useState","guessedWords","setGuessedWords","value","useMemo","Provider","useGuessedWords","context","useContext","Error","successContext","SuccessProvider","success","setSuccess","useSuccess","languageStrings","pl","congrats","submit","guessPrompt","guessInputPlaceholder","guessColumnHeader","matchingLettersColumnHeader","newWord","totalCount","giveUp","secretWordWas","betterLuck","enterSecretWord","serverError","en","emoji","getStringByLanguage","languageCode","stringKey","strings","console","warn","Input","secretWord","language","languageContext","currentGuess","setCurrentGuess","data-test","className","type","placeholder","stringsModule","onChange","e","target","toLowerCase","onClick","preventDefault","letterMatchCount","guessedWord","secretLetters","split","guessedLetterSet","Set","filter","letter","has","length","getLetterMatchCount","newGuessedWords","LanguagePicker","setLanguage","languageIcons","code","symbole","map","lang","key","Congrats","GuessedWords","contents","laguange","guessedWordsRows","word","index","NewWordButton","setGiveUp","hookActions","propType","PropTypes","func","isRequired","GiveUpButton","SecretWordReveal","EnterSecretWordButton","setEnterSecretWord","EntrySecretWord","entryWord","setEntryWord","alert","ServerError","reducer","state","action","payload","App","useReducer","dispatch","useEffect","log","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0837a16f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst getSecretWord = async (setSecretWord, setServerError) => {\r\n  try {\r\n    setSecretWord(\"party\");\r\n  } catch {\r\n    setServerError(true);\r\n  }\r\n};\r\n\r\nexport default { getSecretWord };\r\n","import React from \"react\";\r\n\r\nexport default React.createContext(\"en\");\r\n","import React from \"react\";\r\n\r\nconst guessedWordsContext = React.createContext();\r\n\r\nfunction useGuessedWords() {\r\n  const context = React.useContext(guessedWordsContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\r\n      \"useGuessedWords must be used within a GuessedWordsProvider\"\r\n    );\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nfunction GuessedWordsProvider(props) {\r\n  const [guessedWords, setGuessedWords] = React.useState([]);\r\n\r\n  const value = React.useMemo(() => [guessedWords, setGuessedWords], [\r\n    guessedWords,\r\n  ]);\r\n\r\n  return <guessedWordsContext.Provider value={value} {...props} />;\r\n}\r\n\r\nexport default { GuessedWordsProvider, useGuessedWords };\r\n","import React from \"react\";\r\n\r\nconst successContext = React.createContext();\r\n\r\nfunction useSuccess() {\r\n  const context = React.useContext(successContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useSuccess must be used within a SuccessProvider\");\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nfunction SuccessProvider(props) {\r\n  const [success, setSuccess] = React.useState(false);\r\n\r\n  const value = React.useMemo(() => [success, setSuccess], [success]);\r\n\r\n  return <successContext.Provider value={value} {...props} />;\r\n}\r\n\r\nexport default { SuccessProvider, useSuccess };\r\n","const languageStrings = {\r\n  pl: {\r\n    congrats: \"Gratulacje! Zgadłeś słowo\",\r\n    submit: \"Potwierdź\",\r\n    guessPrompt: \"Spróbuj odgadnąć tajne słowo!\",\r\n    guessInputPlaceholder: \"zgadnij\",\r\n    guessColumnHeader: \"Słowa, które próbowałeś\",\r\n    guessedWords: \"Domysły\",\r\n    matchingLettersColumnHeader: \"Pasujące litery\",\r\n    newWord: \"Nowe słowo\",\r\n    totalCount: \"Liczba prób\",\r\n    giveUp: \"Poddaje się\",\r\n    secretWordWas: \"Szukanym słowem było\",\r\n    betterLuck: \"Następnym razem Ci się uda!\",\r\n    enterSecretWord: \"Dodaj swoje tajne słowo\",\r\n    serverError: \"Problem z serwerem. Spróbuj później\",\r\n  },\r\n  en: {\r\n    congrats: \"Congratulations! You guessed the word!\",\r\n    submit: \"Submit\",\r\n    guessPrompt: \"Try to guess the secret word!\",\r\n    guessInputPlaceholder: \"enter guess\",\r\n    guessColumnHeader: \"Guessed Words\",\r\n    guessedWords: \"Guesses\",\r\n    matchingLettersColumnHeader: \"Matching Letters\",\r\n    newWord: \"New Word\",\r\n    totalCount: \"Total Guesses \",\r\n    giveUp: \"Give Up\",\r\n    secretWordWas: \"The secret word was\",\r\n    betterLuck: \"Better luck next time!\",\r\n    enterSecretWord: \"Enter your own secret word\",\r\n    serverError:\r\n      \"There was an error retrieving the secret word. Please try again later.\",\r\n  },\r\n  emoji: {\r\n    congrats: \"🎯🎉\",\r\n    submit: \"🚀\",\r\n    guessPrompt: \"🤔🤫🔤\",\r\n    guessInputPlaceholder: \"⌨️🤔\",\r\n    guessedWords: \"🤷‍🔤\",\r\n    guessColumnHeader: \"🤷‍\",\r\n    matchingLettersColumnHeader: \"✅\",\r\n    newWord: \"✨🔤\",\r\n    totalCount: \"🧮\",\r\n    giveUp: \"😩\",\r\n    secretWordWas: \"🤫🔤\",\r\n    betterLuck: \"🍀✨🔤\",\r\n    enterSecretWord: \"👩‍💻🤫🔤\",\r\n    serverError: \"🚨. ⏲.\",\r\n  },\r\n};\r\n\r\nfunction getStringByLanguage(\r\n  languageCode,\r\n  stringKey,\r\n  strings = languageStrings\r\n) {\r\n  if (!strings[languageCode] || !strings[languageCode][stringKey]) {\r\n    console.warn(`Could not get string [${stringKey}] for [${languageCode}]`);\r\n    return strings.en[stringKey];\r\n  }\r\n  return strings[languageCode][stringKey];\r\n}\r\n\r\nexport default { getStringByLanguage };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\nimport successContext from \"../../contexts/successContext\";\r\nimport guessedWordsContext from \"../../contexts/guessedWordsContext\";\r\nimport { getLetterMatchCount } from \"../../helpers/index\";\r\n\r\nfunction Input({ secretWord }) {\r\n  const language = React.useContext(languageContext);\r\n\r\n  const [success, setSuccess] = successContext.useSuccess();\r\n  const [guessedWords, setGuessedWords] = guessedWordsContext.useGuessedWords();\r\n\r\n  const [currentGuess, setCurrentGuess] = React.useState(\"\");\r\n\r\n  if (success) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div data-test=\"component-input\">\r\n      <form className=\"form-inline\">\r\n        <input\r\n          data-test=\"input-box\"\r\n          className=\"mb-2 mx-sm-3 mr-1\"\r\n          type=\"text\"\r\n          placeholder={stringsModule.getStringByLanguage(\r\n            language,\r\n            \"guessInputPlaceholder\"\r\n          )}\r\n          value={currentGuess}\r\n          onChange={(e) => {\r\n            setCurrentGuess(e.target.value.toLowerCase());\r\n          }}\r\n        />\r\n        <button\r\n          data-test=\"submit-button\"\r\n          className=\"btn btn-primary mb-2\"\r\n          type=\"submit\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n\r\n            const letterMatchCount = getLetterMatchCount(\r\n              currentGuess,\r\n              secretWord\r\n            );\r\n            const newGuessedWords = [\r\n              ...guessedWords,\r\n              { guessedWord: currentGuess, letterMatchCount },\r\n            ];\r\n\r\n            setGuessedWords(newGuessedWords);\r\n\r\n            if (currentGuess === secretWord) {\r\n              setSuccess(true);\r\n            }\r\n\r\n            setCurrentGuess(\"\");\r\n          }}\r\n        >\r\n          {stringsModule.getStringByLanguage(language, \"submit\")}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nInput.propTypes = {\r\n  secretWord: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","export function getLetterMatchCount(guessedWord, secretWord) {\r\n  const secretLetters = secretWord.split(\"\");\r\n  const guessedLetterSet = new Set(guessedWord);\r\n  return secretLetters.filter((letter) => guessedLetterSet.has(letter)).length;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction LanguagePicker({ setLanguage }) {\r\n  const languages = [\r\n    { code: \"pl\", symbole: \"pl\" },\r\n    { code: \"en\", symbole: \"us\" },\r\n    { code: \"emoji\", symbole: \"😊\" },\r\n  ];\r\n\r\n  const languageIcons = languages.map((lang) => (\r\n    <span\r\n      className=\"btn btn-light\"\r\n      data-test=\"language-icons\"\r\n      key={lang.code}\r\n      onClick={() => setLanguage(lang.code)}\r\n    >\r\n      {lang.symbole}\r\n    </span>\r\n  ));\r\n\r\n  return <div data-test=\"component-language-picker\">{languageIcons}</div>;\r\n}\r\n\r\nLanguagePicker.propTypes = {\r\n  setLanguage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LanguagePicker;\r\n","import React from \"react\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\nimport successContext from \"../../contexts/successContext\";\r\n\r\nconst Congrats = () => {\r\n  const [success] = successContext.useSuccess();\r\n  const language = React.useContext(languageContext);\r\n\r\n  if (success) {\r\n    return (\r\n      <div data-test=\"component-congrats\" className=\"alert alert-success\">\r\n        <span data-test=\"congrats-message\">\r\n          {stringsModule.getStringByLanguage(language, \"congrats\")}\r\n        </span>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div data-test=\"component-congrats\" />;\r\n  }\r\n};\r\n\r\nexport default Congrats;\r\n","import React from \"react\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\nimport guessedWordsContext from \"../../contexts/guessedWordsContext\";\r\n\r\nconst GuessedWords = () => {\r\n  const [guessedWords] = guessedWordsContext.useGuessedWords();\r\n  const laguange = React.useContext(languageContext);\r\n\r\n  let contents;\r\n  if (guessedWords.length === 0) {\r\n    contents = (\r\n      <span data-test=\"guess-instructions\">\r\n        {stringsModule.getStringByLanguage(laguange, \"guessPrompt\")}\r\n      </span>\r\n    );\r\n  } else {\r\n    const guessedWordsRows = guessedWords.map((word, index) => (\r\n      <tr data-test=\"guessed-word\" key={index}>\r\n        <td>{word.guessedWord}</td>\r\n        <td>{word.letterMatchCount}</td>\r\n      </tr>\r\n    ));\r\n    contents = (\r\n      <div data-test=\"guessed-words\">\r\n        <h3>{stringsModule.getStringByLanguage(laguange, \"guessedWords\")}</h3>\r\n        <table className=\"table table-sm\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>\r\n                {stringsModule.getStringByLanguage(\r\n                  laguange,\r\n                  \"guessColumnHeader\"\r\n                )}\r\n              </th>\r\n              <th>\r\n                {stringsModule.getStringByLanguage(\r\n                  laguange,\r\n                  \"matchingLettersColumnHeader\"\r\n                )}\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{guessedWordsRows}</tbody>\r\n        </table>\r\n        <div>\r\n          {stringsModule.getStringByLanguage(laguange, \"totalCount\")}:\r\n          {guessedWordsRows.length}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return <div data-test=\"component-guessed-words\">{contents}</div>;\r\n};\r\n\r\nexport default GuessedWords;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport successContext from \"../../contexts/successContext\";\r\nimport guessedWordsContext from \"../../contexts/guessedWordsContext\";\r\nimport hookActions from \"../../actions/hookActions\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\n\r\nimport stringsModule from \"../../helpers/strings\";\r\n\r\nfunction NewWordButton({ setGiveUp, setSecretWord }) {\r\n  const [success, setSuccess] = successContext.useSuccess();\r\n  const [guessedWord, setGuessedWords] = guessedWordsContext.useGuessedWords();\r\n  const language = React.useContext(languageContext);\r\n\r\n  const handleClick = () => {\r\n    setSuccess(false);\r\n    setGuessedWords([]);\r\n    setGiveUp(false);\r\n    hookActions.getSecretWord(setSecretWord);\r\n  };\r\n\r\n  if (success) {\r\n    return (\r\n      <button\r\n        data-test=\"component-new-word-button\"\r\n        className=\"btn btn-primary mb-2\"\r\n        onClick={handleClick}\r\n      >\r\n        {stringsModule.getStringByLanguage(language, \"newWord\")}\r\n      </button>\r\n    );\r\n  } else {\r\n    return <div data-test=\"component-new-word-button\"></div>;\r\n  }\r\n}\r\n\r\nNewWordButton.propType = {\r\n  setSecretWord: PropTypes.func.isRequired,\r\n  setGiveUp: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default NewWordButton;\r\n","import React from \"react\";\r\nimport PropsType from \"prop-types\";\r\n\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport successContext from \"../../contexts/successContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\n\r\nconst GiveUpButton = ({ setGiveUp }) => {\r\n  const language = React.useContext(languageContext);\r\n  const [success, setSuccess] = successContext.useSuccess();\r\n\r\n  if (success) {\r\n    return <div data-test=\"component-give-up-button\" />;\r\n  }\r\n  return (\r\n    <button\r\n      data-test=\"component-give-up-button\"\r\n      className=\"btn btn-danger mb-2\"\r\n      onClick={() => {\r\n        setGiveUp(true);\r\n        setSuccess(true);\r\n      }}\r\n    >\r\n      {stringsModule.getStringByLanguage(language, \"giveUp\")}\r\n    </button>\r\n  );\r\n};\r\n\r\nGiveUpButton.propTypes = {\r\n  setGiveUp: PropsType.func.isRequired,\r\n};\r\n\r\nexport default GiveUpButton;\r\n","import React from \"react\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\nimport PropsType from \"prop-types\";\r\n\r\nfunction SecretWordReveal({ secretWord }) {\r\n  const language = React.useContext(languageContext);\r\n  return (\r\n    <div data-test=\"component-reveal\" className=\"alert alert-danger\">\r\n      <p>\r\n        {stringsModule.getStringByLanguage(language, \"secretWordWas\")} \"\r\n        {secretWord}\"\r\n      </p>\r\n      <p>{stringsModule.getStringByLanguage(language, \"betterLuck\")}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nSecretWordReveal.propTypes = {\r\n  secretWord: PropsType.string.isRequired,\r\n};\r\n\r\nexport default SecretWordReveal;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport guessedWordsContext from \"../../contexts/guessedWordsContext\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\n\r\nfunction EnterSecretWordButton({ setEnterSecretWord }) {\r\n  const [guessedWords] = guessedWordsContext.useGuessedWords();\r\n  const language = React.useContext(languageContext);\r\n\r\n  if (guessedWords.length > 0) {\r\n    return <div data-test=\"component-enter-secret-word-button\" />;\r\n  } else {\r\n    return (\r\n      <button\r\n        data-test=\"component-enter-secret-word-button\"\r\n        className=\"btn btn-primary mb-2\"\r\n        onClick={() => setEnterSecretWord(true)}\r\n      >\r\n        {stringsModule.getStringByLanguage(language, \"enterSecretWord\")}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nEnterSecretWordButton.propTypes = {\r\n  setEnterSecretWord: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EnterSecretWordButton;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport languageContext from \"../../contexts/languageContext\";\r\nimport stringsModule from \"../../helpers/strings\";\r\n\r\nfunction EntrySecretWord({ setEnterSecretWord, setSecretWord, giveUp }) {\r\n  const [entryWord, setEntryWord] = React.useState(\"\");\r\n  const language = React.useContext(languageContext);\r\n\r\n  return (\r\n    <div data-test=\"component-entry-secret-word\">\r\n      <form>\r\n        <input\r\n          data-test=\"input-box\"\r\n          className=\"mb-2 mx-sm-3\"\r\n          type=\"text\"\r\n          value={entryWord}\r\n          onChange={(e) => {\r\n            setEntryWord(e.target.value.toLowerCase());\r\n          }}\r\n        />\r\n        <button\r\n          data-test=\"submit-button\"\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-2\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            if (!entryWord) return alert(\"put secret word\");\r\n            setSecretWord(entryWord);\r\n            setEnterSecretWord(false);\r\n            setEntryWord(\"\");\r\n            giveUp(false);\r\n          }}\r\n        >\r\n          {stringsModule.getStringByLanguage(language, \"submit\")}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nEntrySecretWord.propTypes = {\r\n  giveUp: PropTypes.func.isRequired,\r\n  setEnterSecretWord: PropTypes.func.isRequired,\r\n  setSecretWord: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EntrySecretWord;\r\n","import React from \"react\";\r\n\r\nimport stringsModule from \"../../helpers/strings\";\r\nimport languageContext from \"../../contexts/languageContext\";\r\n\r\nfunction ServerError() {\r\n  const language = React.useContext(languageContext);\r\n\r\n  return (\r\n    <div data-test=\"component-server-error\" className=\"alert alert-danger\">\r\n      {stringsModule.getStringByLanguage(language, \"serverError\")}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ServerError;\r\n","import React from \"react\";\r\nimport hookActions from \"./actions/hookActions\";\r\nimport languageContext from \"./contexts/languageContext\";\r\nimport guessedWordsContext from \"./contexts/guessedWordsContext\";\r\nimport successContext from \"./contexts/successContext\";\r\n\r\nimport Input from \"./components/input/Input\";\r\nimport LanguagePicker from \"./components/languagePicker/languagePicker\";\r\nimport Congrats from \"./components/congrats/Congrats\";\r\nimport GuessedWords from \"./components/guessedWords/GuessedWords\";\r\nimport NewWordButton from \"./components/newWordButton/NewWordButton\";\r\nimport GiveUpButton from \"./components/giveUpButton/GiveUpButton\";\r\nimport SecretWordReveal from \"./components/secretWordReveal/SecretWordReveal\";\r\n\r\nimport EnterSecretWordButton from \"./components/enterSecretWordButton/EnterSecretWordButton\";\r\nimport EntrySecretWord from \"./components/entrySecretWord/EntrySecretWord\";\r\nimport ServerError from \"./components/serverError/ServerError\";\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \"setSecretWord\":\r\n      return { ...state, secretWord: action.payload };\r\n    case \"setLanguage\":\r\n      return { ...state, language: action.payload };\r\n    case \"setGiveUp\":\r\n      return { ...state, giveUp: action.payload };\r\n    case \"setEnterSecretWord\":\r\n      return { ...state, enterSecretWord: action.payload };\r\n    case \"setServerError\":\r\n      return { ...state, serverError: action.payload };\r\n    default:\r\n      throw new Error(`invalid aciotn type: ${action.type}`);\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    secretWord: null,\r\n    language: \"en\",\r\n  });\r\n\r\n  const setSecretWord = (secretWord) =>\r\n    dispatch({ type: \"setSecretWord\", payload: secretWord });\r\n\r\n  const setLanguage = (language) => {\r\n    dispatch({ type: \"setLanguage\", payload: language });\r\n  };\r\n\r\n  const setGiveUp = (giveUp) => {\r\n    dispatch({ type: \"setGiveUp\", payload: giveUp });\r\n  };\r\n\r\n  const setEnterSecretWord = (enterSecretWord) => {\r\n    dispatch({ type: \"setEnterSecretWord\", payload: enterSecretWord });\r\n  };\r\n\r\n  const setServerError = (serverError) => {\r\n    dispatch({ type: \"setServerError\", payload: serverError });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    hookActions.getSecretWord(setSecretWord, setServerError);\r\n  }, []);\r\n  console.log(state.serverError);\r\n\r\n  if (state.serverError) {\r\n    return <ServerError />;\r\n  }\r\n\r\n  if (!state.secretWord) {\r\n    return (\r\n      <div className=\"container\" data-test=\"component-spinner\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n        <p>Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" data-test=\"component-app\">\r\n      <languageContext.Provider value={state.language}>\r\n        <LanguagePicker setLanguage={setLanguage} />\r\n        <h1>Jotto word game</h1>\r\n        <guessedWordsContext.GuessedWordsProvider>\r\n          {state.enterSecretWord ? (\r\n            <EntrySecretWord\r\n              giveUp={setGiveUp}\r\n              setEnterSecretWord={setEnterSecretWord}\r\n              setSecretWord={setSecretWord}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <successContext.SuccessProvider>\r\n                {state.giveUp ? (\r\n                  <SecretWordReveal secretWord={state.secretWord} />\r\n                ) : (\r\n                  <Congrats />\r\n                )}\r\n                <NewWordButton\r\n                  setSecretWord={setSecretWord}\r\n                  setGiveUp={setGiveUp}\r\n                />\r\n                <Input secretWord={state.secretWord} />\r\n                {!state.giveUp ? <GiveUpButton setGiveUp={setGiveUp} /> : \"\"}\r\n              </successContext.SuccessProvider>\r\n              <GuessedWords />\r\n              <EnterSecretWordButton setEnterSecretWord={setEnterSecretWord} />\r\n            </div>\r\n          )}\r\n        </guessedWordsContext.GuessedWordsProvider>\r\n      </languageContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}